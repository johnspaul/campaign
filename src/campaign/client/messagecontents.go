// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "campaign": messagecontents Resource Client
//
// Command:
// $ goagen
// --design=campaign/design
// --out=$(GOPATH)/src/campaign
// --regen=true
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateMessagecontentsPath computes a request path to the create action of messagecontents.
func CreateMessagecontentsPath() string {

	return fmt.Sprintf("/messagecontents/")
}

// Creates a message content.
func (c *Client) CreateMessagecontents(ctx context.Context, path string, payload *MessageContentPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateMessagecontentsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateMessagecontentsRequest create the request corresponding to the create action endpoint of the messagecontents resource.
func (c *Client) NewCreateMessagecontentsRequest(ctx context.Context, path string, payload *MessageContentPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteMessagecontentsPath computes a request path to the delete action of messagecontents.
func DeleteMessagecontentsPath(messageID string) string {
	param0 := messageID

	return fmt.Sprintf("/messagecontents/%s", param0)
}

// Deletes a message.
func (c *Client) DeleteMessagecontents(ctx context.Context, path string, payload *MessageContentDeletePayload, contentType string) (*http.Response, error) {
	req, err := c.NewDeleteMessagecontentsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteMessagecontentsRequest create the request corresponding to the delete action endpoint of the messagecontents resource.
func (c *Client) NewDeleteMessagecontentsRequest(ctx context.Context, path string, payload *MessageContentDeletePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// GetMessagecontentsPath computes a request path to the get action of messagecontents.
func GetMessagecontentsPath(messageID string) string {
	param0 := messageID

	return fmt.Sprintf("/messagecontents/%s", param0)
}

// Returns the messages defined for specific product type.
func (c *Client) GetMessagecontents(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetMessagecontentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetMessagecontentsRequest create the request corresponding to the get action endpoint of the messagecontents resource.
func (c *Client) NewGetMessagecontentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListMessagecontentsPath computes a request path to the list action of messagecontents.
func ListMessagecontentsPath() string {

	return fmt.Sprintf("/messagecontents/")
}

// Returns all the messages.
func (c *Client) ListMessagecontents(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListMessagecontentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListMessagecontentsRequest create the request corresponding to the list action endpoint of the messagecontents resource.
func (c *Client) NewListMessagecontentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateMessagecontentsPath computes a request path to the update action of messagecontents.
func UpdateMessagecontentsPath(messageID string) string {
	param0 := messageID

	return fmt.Sprintf("/messagecontents/%s", param0)
}

// Updates a  message.
func (c *Client) UpdateMessagecontents(ctx context.Context, path string, payload *MessageContentUpdatePayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateMessagecontentsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateMessagecontentsRequest create the request corresponding to the update action endpoint of the messagecontents resource.
func (c *Client) NewUpdateMessagecontentsRequest(ctx context.Context, path string, payload *MessageContentUpdatePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
