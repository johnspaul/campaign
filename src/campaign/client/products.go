// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "campaign": products Resource Client
//
// Command:
// $ goagen
// --design=campaign/design
// --out=$(GOPATH)/src/campaign
// --regen=true
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateProductsPath computes a request path to the create action of products.
func CreateProductsPath() string {

	return fmt.Sprintf("/products/")
}

// creates a product
func (c *Client) CreateProducts(ctx context.Context, path string, payload *ProductPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateProductsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateProductsRequest create the request corresponding to the create action endpoint of the products resource.
func (c *Client) NewCreateProductsRequest(ctx context.Context, path string, payload *ProductPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// GetProductsPath computes a request path to the get action of products.
func GetProductsPath(productID string) string {
	param0 := productID

	return fmt.Sprintf("/products/%s", param0)
}

// GetProducts makes a request to the get action endpoint of the products resource
func (c *Client) GetProducts(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetProductsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetProductsRequest create the request corresponding to the get action endpoint of the products resource.
func (c *Client) NewGetProductsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
