// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "campaign": Application Contexts
//
// Command:
// $ goagen
// --design=campaign/design
// --out=$(GOPATH)/src/campaign
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateCampaignsContext provides the campaigns create action context.
type CreateCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CampaignPayload
}

// NewCreateCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller create action.
func NewCreateCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCampaignsContext) Created(r *Campaign) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// DeleteCampaignsContext provides the campaigns delete action context.
type DeleteCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CampaignID string
}

// NewDeleteCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller delete action.
func NewDeleteCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCampaignID := req.Params["campaignId"]
	if len(paramCampaignID) > 0 {
		rawCampaignID := paramCampaignID[0]
		rctx.CampaignID = rawCampaignID
	}
	return &rctx, err
}

// Deleted sends a HTTP response with status code 204.
func (ctx *DeleteCampaignsContext) Deleted() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCampaignsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetCampaignsContext provides the campaigns get action context.
type GetCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CampaignID string
}

// NewGetCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller get action.
func NewGetCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCampaignID := req.Params["campaignId"]
	if len(paramCampaignID) > 0 {
		rawCampaignID := paramCampaignID[0]
		rctx.CampaignID = rawCampaignID
	}
	return &rctx, err
}

// OKDetailed sends a HTTP response with status code 200.
func (ctx *GetCampaignsContext) OKDetailed(r *CampaignDetailed) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetCampaignsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetAllCampaignsContext provides the campaigns getAll action context.
type GetAllCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	State *float64
}

// NewGetAllCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller getAll action.
func NewGetAllCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramState := req.Params["state"]
	if len(paramState) > 0 {
		rawState := paramState[0]
		if state, err2 := strconv.ParseFloat(rawState, 64); err2 == nil {
			tmp1 := &state
			rctx.State = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("state", rawState, "number"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllCampaignsContext) OK(r CampaignCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign; type=collection")
	if r == nil {
		r = CampaignCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetAllCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetAllCampaignExecutionCampaignsContext provides the campaigns getAllCampaignExecution action context.
type GetAllCampaignExecutionCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CampaignID string
}

// NewGetAllCampaignExecutionCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller getAllCampaignExecution action.
func NewGetAllCampaignExecutionCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllCampaignExecutionCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllCampaignExecutionCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCampaignID := req.Params["campaignId"]
	if len(paramCampaignID) > 0 {
		rawCampaignID := paramCampaignID[0]
		rctx.CampaignID = rawCampaignID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllCampaignExecutionCampaignsContext) OK(r *CampaignExecutionContext) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaignexecution")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllCampaignExecutionCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetAllCampaignExecutionCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetAllCampaignExecutionCampaignsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllCampaignExecutionCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetCampaignExecutionCampaignsContext provides the campaigns getCampaignExecution action context.
type GetCampaignExecutionCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CampaignID  string
	ExecutionID string
}

// NewGetCampaignExecutionCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller getCampaignExecution action.
func NewGetCampaignExecutionCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCampaignExecutionCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCampaignExecutionCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCampaignID := req.Params["campaignId"]
	if len(paramCampaignID) > 0 {
		rawCampaignID := paramCampaignID[0]
		rctx.CampaignID = rawCampaignID
	}
	paramExecutionID := req.Params["executionId"]
	if len(paramExecutionID) > 0 {
		rawExecutionID := paramExecutionID[0]
		rctx.ExecutionID = rawExecutionID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCampaignExecutionCampaignsContext) OK(r *CampaignExecutionContext) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaignexecution")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetCampaignExecutionCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetCampaignExecutionCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetCampaignExecutionCampaignsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetCampaignExecutionCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// UpdateCampaignsContext provides the campaigns update action context.
type UpdateCampaignsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CampaignID string
	Payload    *CampaignUpdatePayload
}

// NewUpdateCampaignsContext parses the incoming request URL and body, performs validations and creates the
// context used by the campaigns controller update action.
func NewUpdateCampaignsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCampaignsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCampaignsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCampaignID := req.Params["campaignId"]
	if len(paramCampaignID) > 0 {
		rawCampaignID := paramCampaignID[0]
		rctx.CampaignID = rawCampaignID
	}
	return &rctx, err
}

// Updated sends a HTTP response with status code 202.
func (ctx *UpdateCampaignsContext) Updated(r *Campaign) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign")
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCampaignsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateCampaignsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCampaignsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCampaignsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateCustomerServiceContext provides the customerService create action context.
type CreateCustomerServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCreateCustomerServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the customerService controller create action.
func NewCreateCustomerServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCustomerServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCustomerServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// GetLeadContext provides the lead get action context.
type GetLeadContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProductID string
}

// NewGetLeadContext parses the incoming request URL and body, performs validations and creates the
// context used by the lead controller get action.
func NewGetLeadContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetLeadContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetLeadContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProductID := req.Params["productId"]
	if len(paramProductID) > 0 {
		rawProductID := paramProductID[0]
		rctx.ProductID = rawProductID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 201.
func (ctx *GetLeadContext) OK(r *LeadPoolLength) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.leadpool")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetLeadContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateMessagecontentsContext provides the messagecontents create action context.
type CreateMessagecontentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *MessageContentPayload
}

// NewCreateMessagecontentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the messagecontents controller create action.
func NewCreateMessagecontentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateMessagecontentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateMessagecontentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateMessagecontentsContext) Created(r *CampaignMessageContent) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign.messagecontent")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateMessagecontentsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateMessagecontentsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateMessagecontentsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// DeleteMessagecontentsContext provides the messagecontents delete action context.
type DeleteMessagecontentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MessageID string
}

// NewDeleteMessagecontentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the messagecontents controller delete action.
func NewDeleteMessagecontentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMessagecontentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMessagecontentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMessageID := req.Params["messageId"]
	if len(paramMessageID) > 0 {
		rawMessageID := paramMessageID[0]
		rctx.MessageID = rawMessageID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 204.
func (ctx *DeleteMessagecontentsContext) OK() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteMessagecontentsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteMessagecontentsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteMessagecontentsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteMessagecontentsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetMessagecontentsContext provides the messagecontents get action context.
type GetMessagecontentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MessageID string
}

// NewGetMessagecontentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the messagecontents controller get action.
func NewGetMessagecontentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMessagecontentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMessagecontentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMessageID := req.Params["messageId"]
	if len(paramMessageID) > 0 {
		rawMessageID := paramMessageID[0]
		rctx.MessageID = rawMessageID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMessagecontentsContext) OK(r *CampaignMessageContent) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign.messagecontent")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetMessagecontentsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetMessagecontentsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetMessagecontentsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetMessagecontentsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// ListMessagecontentsContext provides the messagecontents list action context.
type ListMessagecontentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListMessagecontentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the messagecontents controller list action.
func NewListMessagecontentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMessagecontentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMessagecontentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMessagecontentsContext) OK(r CampaignMessageContentCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign.messagecontent; type=collection")
	if r == nil {
		r = CampaignMessageContentCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListMessagecontentsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListMessagecontentsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListMessagecontentsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// UpdateMessagecontentsContext provides the messagecontents update action context.
type UpdateMessagecontentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MessageID string
	Payload   *MessageContentUpdatePayload
}

// NewUpdateMessagecontentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the messagecontents controller update action.
func NewUpdateMessagecontentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateMessagecontentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateMessagecontentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMessageID := req.Params["messageId"]
	if len(paramMessageID) > 0 {
		rawMessageID := paramMessageID[0]
		rctx.MessageID = rawMessageID
	}
	return &rctx, err
}

// Updated sends a HTTP response with status code 202.
func (ctx *UpdateMessagecontentsContext) Updated(r *CampaignMessageContent) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign.messagecontent")
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateMessagecontentsContext) BadRequest(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(400)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateMessagecontentsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateMessagecontentsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateMessagecontentsContext) InternalServerError(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/text")
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateProductsContext provides the products create action context.
type CreateProductsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ProductPayload
}

// NewCreateProductsContext parses the incoming request URL and body, performs validations and creates the
// context used by the products controller create action.
func NewCreateProductsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateProductsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateProductsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateProductsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// GetProductsContext provides the products get action context.
type GetProductsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProductID string
}

// NewGetProductsContext parses the incoming request URL and body, performs validations and creates the
// context used by the products controller get action.
func NewGetProductsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetProductsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetProductsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProductID := req.Params["productId"]
	if len(paramProductID) > 0 {
		rawProductID := paramProductID[0]
		rctx.ProductID = rawProductID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 201.
func (ctx *GetProductsContext) OK(r *CampaignProductMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.campaign.product")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetProductsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateSmstrackerserviceContext provides the smstrackerservice create action context.
type CreateSmstrackerserviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SmsPayload
}

// NewCreateSmstrackerserviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the smstrackerservice controller create action.
func NewCreateSmstrackerserviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateSmstrackerserviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateSmstrackerserviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateSmstrackerserviceContext) OK(r *SmsMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ts.smstracker")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
