// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "campaign": Application Media Types
//
// Command:
// $ goagen
// --design=campaign/design
// --out=$(GOPATH)/src/campaign
// --regen=true
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// Campaign media type (default view)
//
// Identifier: application/ts.campaign; view=default
type Campaign struct {
	// Campaign id
	CampaignID *string `form:"campaignId,omitempty" json:"campaignId,omitempty" xml:"campaignId,omitempty"`
	// End date of the Campaign
	EndDate *int `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// Start date of the Campaign
	StartDate *int `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// State of the Campaign
	State *int `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// Campaign media type (detailed view)
//
// Identifier: application/ts.campaign; view=detailed
type CampaignDetailed struct {
	// Campaign id
	CampaignID *string `form:"campaignId,omitempty" json:"campaignId,omitempty" xml:"campaignId,omitempty"`
	// End date of the Campaign
	EndDate *int `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// Message content to be attached
	Messages []*CampaignMessage `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
	// Start date of the Campaign
	StartDate *int `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// State of the Campaign
	State *int `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// Validate validates the CampaignDetailed media type instance.
func (mt *CampaignDetailed) Validate() (err error) {
	for _, e := range mt.Messages {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CampaignMessage media type (default view)
//
// Identifier: application/ts.campaign.message; view=default
type CampaignMessage struct {
	// campaign id
	CampaignID *string `form:"campaignId,omitempty" json:"campaignId,omitempty" xml:"campaignId,omitempty"`
	// The message
	Message *MessageContentPayload `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Percentage of sms to be made out of this message
	Percentage *string `form:"percentage,omitempty" json:"percentage,omitempty" xml:"percentage,omitempty"`
}

// Validate validates the CampaignMessage media type instance.
func (mt *CampaignMessage) Validate() (err error) {
	if mt.Message != nil {
		if err2 := mt.Message.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// CampaignMessageContent media type (default view)
//
// Identifier: application/ts.campaign.messagecontent; view=default
type CampaignMessageContent struct {
	// The Message
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Message content  id
	MessageID *string `form:"messageId,omitempty" json:"messageId,omitempty" xml:"messageId,omitempty"`
}

// campaignProductMedia media type (default view)
//
// Identifier: application/ts.campaign.product; view=default
type CampaignProductMedia struct {
	AvailableLocations []*ProductLocation `form:"availableLocations,omitempty" json:"availableLocations,omitempty" xml:"availableLocations,omitempty"`
	ClientCode         *string            `form:"clientCode,omitempty" json:"clientCode,omitempty" xml:"clientCode,omitempty"`
	Criteria           []*ProductCriteria `form:"criteria,omitempty" json:"criteria,omitempty" xml:"criteria,omitempty"`
	DailyVolume        *int               `form:"dailyVolume,omitempty" json:"dailyVolume,omitempty" xml:"dailyVolume,omitempty"`
	ProductCode        *string            `form:"productCode,omitempty" json:"productCode,omitempty" xml:"productCode,omitempty"`
	ProductID          *string            `form:"productId,omitempty" json:"productId,omitempty" xml:"productId,omitempty"`
	ProductType        *string            `form:"productType,omitempty" json:"productType,omitempty" xml:"productType,omitempty"`
}

// CampaignExecutionContext media type (default view)
//
// Identifier: application/ts.campaignexecution; view=default
type CampaignExecutionContext struct {
	// campaign id
	CampaignID *string `form:"campaignId,omitempty" json:"campaignId,omitempty" xml:"campaignId,omitempty"`
	// execution endTime time
	EndTime *time.Time `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	// execution id
	ExecutionID *string `form:"executionId,omitempty" json:"executionId,omitempty" xml:"executionId,omitempty"`
	// Number of message sent in this execution
	NumMessagesSent *float64 `form:"numMessagesSent,omitempty" json:"numMessagesSent,omitempty" xml:"numMessagesSent,omitempty"`
	// execution start time
	StartTime *time.Time `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
}

// leadPoolLength media type (default view)
//
// Identifier: application/ts.leadpool; view=default
type LeadPoolLength struct {
	// length of lead pool
	Length *string `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
}
