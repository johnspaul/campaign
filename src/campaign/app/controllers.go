// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "campaign": Application Controllers
//
// Command:
// $ goagen
// --design=campaign/design
// --out=$(GOPATH)/src/campaign
// --regen=true
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// CampaignsController is the controller interface for the Campaigns actions.
type CampaignsController interface {
	goa.Muxer
	Create(*CreateCampaignsContext) error
	Delete(*DeleteCampaignsContext) error
	Get(*GetCampaignsContext) error
	GetAll(*GetAllCampaignsContext) error
	GetAllCampaignExecution(*GetAllCampaignExecutionCampaignsContext) error
	GetCampaignExecution(*GetCampaignExecutionCampaignsContext) error
	Update(*UpdateCampaignsContext) error
}

// MountCampaignsController "mounts" a Campaigns resource controller on the given service.
func MountCampaignsController(service *goa.Service, ctrl CampaignsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CampaignPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/campaigns/", ctrl.MuxHandler("create", h, unmarshalCreateCampaignsPayload))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "Create", "route", "POST /campaigns/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/campaigns/:campaignId", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "Delete", "route", "DELETE /campaigns/:campaignId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/campaigns/:campaignId", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "Get", "route", "GET /campaigns/:campaignId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAll(rctx)
	}
	service.Mux.Handle("GET", "/campaigns/", ctrl.MuxHandler("getAll", h, nil))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "GetAll", "route", "GET /campaigns/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllCampaignExecutionCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAllCampaignExecution(rctx)
	}
	service.Mux.Handle("GET", "/campaigns/:campaignId/executions", ctrl.MuxHandler("getAllCampaignExecution", h, nil))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "GetAllCampaignExecution", "route", "GET /campaigns/:campaignId/executions")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetCampaignExecutionCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetCampaignExecution(rctx)
	}
	service.Mux.Handle("GET", "/campaigns/:campaignId/executions/:executionId", ctrl.MuxHandler("getCampaignExecution", h, nil))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "GetCampaignExecution", "route", "GET /campaigns/:campaignId/executions/:executionId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateCampaignsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CampaignUpdatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	service.Mux.Handle("PATCH", "/campaigns/:campaignId", ctrl.MuxHandler("update", h, unmarshalUpdateCampaignsPayload))
	service.LogInfo("mount", "ctrl", "Campaigns", "action", "Update", "route", "PATCH /campaigns/:campaignId")
}

// unmarshalCreateCampaignsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateCampaignsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &campaignPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateCampaignsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateCampaignsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &campaignUpdatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// LeadController is the controller interface for the Lead actions.
type LeadController interface {
	goa.Muxer
	Get(*GetLeadContext) error
}

// MountLeadController "mounts" a Lead resource controller on the given service.
func MountLeadController(service *goa.Service, ctrl LeadController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetLeadContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/lead/:productId", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Lead", "action", "Get", "route", "GET /lead/:productId")
}

// MessagecontentsController is the controller interface for the Messagecontents actions.
type MessagecontentsController interface {
	goa.Muxer
	Create(*CreateMessagecontentsContext) error
	Delete(*DeleteMessagecontentsContext) error
	Get(*GetMessagecontentsContext) error
	List(*ListMessagecontentsContext) error
	Update(*UpdateMessagecontentsContext) error
}

// MountMessagecontentsController "mounts" a Messagecontents resource controller on the given service.
func MountMessagecontentsController(service *goa.Service, ctrl MessagecontentsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateMessagecontentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*MessageContentPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/messagecontents/", ctrl.MuxHandler("create", h, unmarshalCreateMessagecontentsPayload))
	service.LogInfo("mount", "ctrl", "Messagecontents", "action", "Create", "route", "POST /messagecontents/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteMessagecontentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*MessageContentDeletePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/messagecontents/:messageId", ctrl.MuxHandler("delete", h, unmarshalDeleteMessagecontentsPayload))
	service.LogInfo("mount", "ctrl", "Messagecontents", "action", "Delete", "route", "DELETE /messagecontents/:messageId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetMessagecontentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/messagecontents/:messageId", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Messagecontents", "action", "Get", "route", "GET /messagecontents/:messageId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListMessagecontentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/messagecontents/", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Messagecontents", "action", "List", "route", "GET /messagecontents/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateMessagecontentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*MessageContentUpdatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	service.Mux.Handle("PUT", "/messagecontents/:messageId", ctrl.MuxHandler("update", h, unmarshalUpdateMessagecontentsPayload))
	service.LogInfo("mount", "ctrl", "Messagecontents", "action", "Update", "route", "PUT /messagecontents/:messageId")
}

// unmarshalCreateMessagecontentsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateMessagecontentsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &messageContentPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteMessagecontentsPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteMessagecontentsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &messageContentDeletePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateMessagecontentsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateMessagecontentsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &messageContentUpdatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ProductsController is the controller interface for the Products actions.
type ProductsController interface {
	goa.Muxer
	Create(*CreateProductsContext) error
	Get(*GetProductsContext) error
}

// MountProductsController "mounts" a Products resource controller on the given service.
func MountProductsController(service *goa.Service, ctrl ProductsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateProductsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ProductPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/products/", ctrl.MuxHandler("create", h, unmarshalCreateProductsPayload))
	service.LogInfo("mount", "ctrl", "Products", "action", "Create", "route", "POST /products/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetProductsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/products/:productId", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Products", "action", "Get", "route", "GET /products/:productId")
}

// unmarshalCreateProductsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateProductsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &productPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SmstrackerserviceController is the controller interface for the Smstrackerservice actions.
type SmstrackerserviceController interface {
	goa.Muxer
	Create(*CreateSmstrackerserviceContext) error
}

// MountSmstrackerserviceController "mounts" a Smstrackerservice resource controller on the given service.
func MountSmstrackerserviceController(service *goa.Service, ctrl SmstrackerserviceController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateSmstrackerserviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SmsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/smstrackerservice/", ctrl.MuxHandler("create", h, unmarshalCreateSmstrackerservicePayload))
	service.LogInfo("mount", "ctrl", "Smstrackerservice", "action", "Create", "route", "POST /smstrackerservice/")
}

// unmarshalCreateSmstrackerservicePayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateSmstrackerservicePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &smsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/swagger.json", "route", "GET /swagger.json")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
